#This program simulate timecourse of product formation for one-step chemistry reaction, import data and get rate constants from fitting.




#Create the Dialog where the model,parameters and substrate concentrations of the reaction can be iuput into

from tkinter import *

master = Tk()

#Add label to entry box
L1 = Label(master, text = "Model:")

#Pack the label to the left of entry box
L1.pack(side = "left")

#Align labels in grid
L1.grid(row=0, sticky=W)

#Create an entry box
E1 = Entry(master)

#Pack entry box to the right of the label
E1.pack(side = "right")

#Aligh boxes in grid
E1.grid(row=0, column=1)

#Repeats for remaining labels and entry boxes
L2 = Label(master, text = "k1:")
L2.pack(side = "left")
L2.grid(row=1, sticky=W)
E2 = Entry(master)
E2.pack(side = "right")
E2.grid(row=1, column=1)

L3 = Label(master, text = "k2:")
L3.pack(side = "left")
L3.grid(row=2, sticky=W)
E3 = Entry(master)
E3.pack(side = "right")
E3.grid(row=2, column=1)

L4 = Label(master, text = "[E]:")
L4.pack(side = "left")
L4.grid(row=3, sticky=W)
E4 = Entry(master)
E4.pack(side = "right")
E4.grid(row=3, column=1)

L5 = Label(master, text = "[S]:")
L5.pack(side = "left")
L5.grid(row=4, sticky=W)
E5 = Entry(master)
E5.pack(side = "right")
E5.grid(row=4, column=1)

L6 = Label(master, text = "time")
L6.pack(side = "left")
L6.grid(row=5, sticky=W)
E6 = Entry(master)
E6.pack(side = "right")
E6.grid(row=5, column=1)

L7 = Label(master, text = "Filepath")
L7.pack(side = "left")
L7.grid(row=7, sticky=W)
E7 = Entry(master)
E7.pack(side = "right")
E7.grid(row=7, column=1)

L8 = Label(master, text = "marker")
L8.pack(side = "left")
L8.grid(row=8, sticky=W)
E8 = Entry(master)
E8.pack(side = "right")
E8.grid(row=8, column=1)

L9 = Label(master, text = "linestyle")
L9.pack(side = "left")
L9.grid(row=9, sticky=W)
E9 = Entry(master)
E9.pack(side = "right")
E9.grid(row=9, column=1)

L10 = Label(master, text = "color")
L10.pack(side = "left")
L10.grid(row=10, sticky=W)
E10 = Entry(master)
E10.pack(side = "right")
E10.grid(row=10, column=1)



#Get the input values and do the plotting

import matplotlib.pyplot as plt
import numpy as np

def callback():
    #Calculations of observed rate (k1*S + k2) based on input values
    kobs = float(E2.get())*float(E5.get()) + float(E3.get())

    #Calculations of reaction amplitude ((k1*S/(k1*S + k2))) based on input values
    A = float(E2.get())*float(E5.get())/kobs

    #Convert enzyme concentration from string to number
    global E
    E = float(E4.get())

    #Get timescale to plot
    global t
    t = float(E6.get())
    

    #Get substrate concentration
    global S
    S = float(E5.get())

    #plot
    print("The observed rate is:",kobs, "The amplitude is:", A)
    #Set x variable starting from 0 and ending at t, with t/100 increments
    x = np.arange(0.0, t, t/100)

    #Formula to get product formation
    ES = E*A*(1 - np.exp(-kobs*x))

    #Plot x against ES, linewidth is 2
    line, = plt.plot(x,ES, lw=2)

    #Plot annotates
    plt.annotate('kobs =', xy=(2*t/3,1.1*E/2), xytext=(2*t/3,1.1*E/2))
    plt.annotate(kobs, xy=(2*t/3,E/2), xytext=(2*t/3,E/2))
    plt.annotate('Amplitude =', xy=(t/4,1.1*E/2), xytext=(t/4,1.1*E/2))
    plt.annotate(A, xy=(t/4,E/2), xytext=(t/4,E/2))

    #Plot labels and titles
    plt.xlabel("Time (S)", size=12)
    plt.ylabel("Product (nM)", size=12)
    plt.title("Time Course of Product Formation", size=20)
    plt.show()
    
#Make a button to trigger value capture and plotting

submit = Button(master, text="Enter", width=15, command = callback)
submit.grid(row=6,column=1)

#Import and Plot Data
#Define function to extract data and make plotting

def ImpData():
    
    #Separate x and y column values, set unpack true can achieve this
    x,y = np.loadtxt(E7.get(), delimiter = ',', unpack = True)

    # marker is shape of data points, e.g, D for diamond, . for dot, * for star, s for square, ^ for triange
    #linestyle include - for solid line, --for dashed line, : for dotted line, -. for dash-dotted line
    #r for red, b for blue, g for gree, c for cyan, m for mageta, y for yellow, k for black, w for withe
    plt.plot(x,y, marker = E8.get(), linestyle = E9.get(), color = E10.get())
    plt.xlabel("Time (S)", size=12)
    plt.ylabel("Product (nM)", size=12)
    plt.title("Time Course of Product Formation", size=20)
    plt.show()

#Make the button
importD = Button(master, text="Import Data", width=15, command = ImpData)
importD.grid(row=11,column=1)



#Fit the imported data
from scipy.optimize import curve_fit

#The fit function to call upon click of button
def fit_data():
    
    def func(x,k1,k2):
        
        #Define the fitting function
        return (E*(k1*S/(k1*S+k2))*(1 - np.exp(-(k1*S+k2)*x)))
    #Data
    x,y = np.loadtxt(E7.get(), delimiter = ',', unpack = True)
    

    #Initial guess of parameters
    p0 =[1,1]

    #Output from fit: parameters and covariance
    popt, pcov = curve_fit(func,x,y,p0)

    print (popt, pcov)

    #Extract rate constans from list
    k1 = popt[0]
    k2 = popt[1]

    print (k1,k2)

    #define the fit curve
    y_fit = func(x, k1, k2)

    #Plotting
    #Plot data points
    plt.plot(x,y, marker = E8.get(), linestyle = 'None', color = E10.get())

    #Plot fitting curve
    plt.plot(x,y_fit, lw=2, color = 'b')

    #Plot annotates
    plt.annotate('k2 =', xy=(2*t/3,1.1*E/2), xytext=(2*t/3,1.1*E/2))
    plt.annotate(k2, xy=(2*t/3,E/2), xytext=(2*t/3,E/2))
    plt.annotate('k1 =', xy=(t/4,1.1*E/2), xytext=(t/4,1.1*E/2))
    plt.annotate(k1, xy=(t/4,E/2), xytext=(t/4,E/2))
    
    
    plt.xlabel("Time (S)", size=12)
    plt.ylabel("Product (nM)", size=12)
    plt.title("Time Course of Product Formation", size=20)
    plt.show()

    

#Create the button
Fit = Button(master, text="Fit Data", width=15, command = fit_data)
Fit.grid(row=15,column=1)
